{"ast":null,"code":"'use strict';\n\nmodule.exports = function () {\n  function replaceWithRange(expression, text, init, end) {\n    var numbers = [];\n    var last = parseInt(end);\n    var first = parseInt(init);\n\n    if (first > last) {\n      last = parseInt(init);\n      first = parseInt(end);\n    }\n\n    for (var i = first; i <= last; i++) {\n      numbers.push(i);\n    }\n\n    return expression.replace(new RegExp(text, 'gi'), numbers.join());\n  }\n\n  function convertRange(expression) {\n    var rangeRegEx = /(\\d+)\\-(\\d+)/;\n    var match = rangeRegEx.exec(expression);\n\n    while (match !== null && match.length > 0) {\n      expression = replaceWithRange(expression, match[0], match[1], match[2]);\n      match = rangeRegEx.exec(expression);\n    }\n\n    return expression;\n  }\n\n  function convertAllRanges(expressions) {\n    for (var i = 0; i < expressions.length; i++) {\n      expressions[i] = convertRange(expressions[i]);\n    }\n\n    return expressions;\n  }\n\n  return convertAllRanges;\n}();","map":{"version":3,"sources":["/Users/montyj/Documents/projects/catchyobus/node_modules/node-cron/src/convert-expression/range-conversion.js"],"names":["module","exports","replaceWithRange","expression","text","init","end","numbers","last","parseInt","first","i","push","replace","RegExp","join","convertRange","rangeRegEx","match","exec","length","convertAllRanges","expressions"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAmB,YAAM;AACvB,WAASC,gBAAT,CAA0BC,UAA1B,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkDC,GAAlD,EAAuD;AAErD,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,IAAI,GAAGC,QAAQ,CAACH,GAAD,CAAnB;AACA,QAAII,KAAK,GAAGD,QAAQ,CAACJ,IAAD,CAApB;;AAEA,QAAGK,KAAK,GAAGF,IAAX,EAAgB;AACdA,MAAAA,IAAI,GAAGC,QAAQ,CAACJ,IAAD,CAAf;AACAK,MAAAA,KAAK,GAAGD,QAAQ,CAACH,GAAD,CAAhB;AACD;;AAED,SAAI,IAAIK,CAAC,GAAGD,KAAZ,EAAmBC,CAAC,IAAIH,IAAxB,EAA8BG,CAAC,EAA/B,EAAmC;AACjCJ,MAAAA,OAAO,CAACK,IAAR,CAAaD,CAAb;AACD;;AAED,WAAOR,UAAU,CAACU,OAAX,CAAmB,IAAIC,MAAJ,CAAWV,IAAX,EAAiB,IAAjB,CAAnB,EAA2CG,OAAO,CAACQ,IAAR,EAA3C,CAAP;AACD;;AAED,WAASC,YAAT,CAAsBb,UAAtB,EAAiC;AAC/B,QAAIc,UAAU,GAAG,cAAjB;AACA,QAAIC,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBhB,UAAhB,CAAZ;;AACA,WAAMe,KAAK,KAAK,IAAV,IAAkBA,KAAK,CAACE,MAAN,GAAe,CAAvC,EAAyC;AACvCjB,MAAAA,UAAU,GAAGD,gBAAgB,CAACC,UAAD,EAAae,KAAK,CAAC,CAAD,CAAlB,EAAuBA,KAAK,CAAC,CAAD,CAA5B,EAAiCA,KAAK,CAAC,CAAD,CAAtC,CAA7B;AACAA,MAAAA,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBhB,UAAhB,CAAR;AACD;;AACD,WAAOA,UAAP;AACD;;AAED,WAASkB,gBAAT,CAA0BC,WAA1B,EAAsC;AACpC,SAAI,IAAIX,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGW,WAAW,CAACF,MAA/B,EAAuCT,CAAC,EAAxC,EAA2C;AACzCW,MAAAA,WAAW,CAACX,CAAD,CAAX,GAAiBK,YAAY,CAACM,WAAW,CAACX,CAAD,CAAZ,CAA7B;AACD;;AACD,WAAOW,WAAP;AACD;;AAED,SAAOD,gBAAP;AACD,CArCgB,EAAjB","sourcesContent":["'use strict';\nmodule.exports = ( () => {\n  function replaceWithRange(expression, text, init, end) {\n\n    var numbers = [];\n    var last = parseInt(end);\n    var first = parseInt(init);\n\n    if(first > last){\n      last = parseInt(init);\n      first = parseInt(end);\n    }\n\n    for(var i = first; i <= last; i++) {\n      numbers.push(i);\n    }\n\n    return expression.replace(new RegExp(text, 'gi'), numbers.join());\n  }\n\n  function convertRange(expression){\n    var rangeRegEx = /(\\d+)\\-(\\d+)/;\n    var match = rangeRegEx.exec(expression);\n    while(match !== null && match.length > 0){\n      expression = replaceWithRange(expression, match[0], match[1], match[2]);\n      match = rangeRegEx.exec(expression);\n    }\n    return expression;\n  }\n\n  function convertAllRanges(expressions){\n    for(var i = 0; i < expressions.length; i++){\n      expressions[i] = convertRange(expressions[i]);\n    }\n    return expressions;\n  }\n\n  return convertAllRanges;\n})();\n\n\n\n"]},"metadata":{},"sourceType":"script"}