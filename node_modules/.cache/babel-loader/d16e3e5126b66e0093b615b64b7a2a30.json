{"ast":null,"code":"var offsets = require(\"../generated/offsets\");\n\nmodule.exports = function () {\n  function offsetOf(timezone) {\n    var offset = offsets[timezone];\n\n    if (offset != undefined && offset != null) {\n      return offset;\n    } else {\n      throw Error(\"Invalid timezone \" + timezone);\n    }\n  }\n\n  function removeOffset(date) {\n    var currentOffset = date.getTimezoneOffset() * -60000;\n    return date.getTime() - currentOffset;\n  }\n\n  function timeAt(date, timezone) {\n    var timeUtc = removeOffset(date);\n    var offset = offsetOf(timezone) * -60000;\n    return new Date(timeUtc + offset);\n  }\n\n  return {\n    offsetOf: offsetOf,\n    removeOffset: removeOffset,\n    timeAt: timeAt\n  };\n}();","map":{"version":3,"sources":["/Users/montyj/Documents/projects/catchyobus/node_modules/tz-offset/src/tz-offset.js"],"names":["offsets","require","module","exports","offsetOf","timezone","offset","undefined","Error","removeOffset","date","currentOffset","getTimezoneOffset","getTime","timeAt","timeUtc","Date"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAkB,YAAW;AAEzB,WAASC,QAAT,CAAkBC,QAAlB,EAA2B;AACvB,QAAIC,MAAM,GAAGN,OAAO,CAACK,QAAD,CAApB;;AACA,QAAGC,MAAM,IAAIC,SAAV,IAAuBD,MAAM,IAAI,IAApC,EAAyC;AACrC,aAAOA,MAAP;AACH,KAFD,MAEO;AACH,YAAME,KAAK,CAAC,sBAAqBH,QAAtB,CAAX;AACH;AACJ;;AAED,WAASI,YAAT,CAAsBC,IAAtB,EAA2B;AACvB,QAAIC,aAAa,GAAGD,IAAI,CAACE,iBAAL,KAA2B,CAAC,KAAhD;AACA,WAAOF,IAAI,CAACG,OAAL,KAAiBF,aAAxB;AACH;;AAED,WAASG,MAAT,CAAgBJ,IAAhB,EAAsBL,QAAtB,EAA+B;AAC3B,QAAIU,OAAO,GAAGN,YAAY,CAACC,IAAD,CAA1B;AACA,QAAIJ,MAAM,GAAGF,QAAQ,CAACC,QAAD,CAAR,GAAqB,CAAC,KAAnC;AACA,WAAO,IAAIW,IAAJ,CAASD,OAAO,GAAGT,MAAnB,CAAP;AACH;;AAED,SAAO;AACHF,IAAAA,QAAQ,EAAEA,QADP;AAEHK,IAAAA,YAAY,EAAEA,YAFX;AAGHK,IAAAA,MAAM,EAAEA;AAHL,GAAP;AAKH,CA3BgB,EAAjB","sourcesContent":["var offsets = require(\"../generated/offsets\");\n\nmodule.exports = (function() {\n    \n    function offsetOf(timezone){\n        var offset = offsets[timezone];\n        if(offset != undefined && offset != null){\n            return offset;\n        } else {\n            throw Error(\"Invalid timezone \"+ timezone);\n        }\n    }\n\n    function removeOffset(date){\n        var currentOffset = date.getTimezoneOffset() * -60000;\n        return date.getTime() - currentOffset;\n    }\n\n    function timeAt(date, timezone){\n        let timeUtc = removeOffset(date);\n        var offset = offsetOf(timezone) * -60000;\n        return new Date(timeUtc + offset);\n    }\n\n    return {\n        offsetOf: offsetOf,\n        removeOffset: removeOffset,\n        timeAt: timeAt\n    };\n})();"]},"metadata":{},"sourceType":"script"}