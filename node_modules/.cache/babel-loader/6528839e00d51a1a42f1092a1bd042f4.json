{"ast":null,"code":"'use strict';\n\nvar tzOffset = require('tz-offset');\n/**\n* Creates a new scheduled task.\n*\n* @param {Task} task - task to schedule.\n* @param {*} options - task options.\n*/\n\n\nfunction ScheduledTask(task, options) {\n  var timezone = options.timezone;\n  /**\n  * Starts updating the task.\n  *\n  * @returns {ScheduledTask} instance of this task.\n  */\n\n  this.start = () => {\n    this.status = 'scheduled';\n\n    if (this.task && !this.tick) {\n      this.tick = setTimeout(this.task, 1000 - new Date().getMilliseconds() + 1);\n    }\n\n    return this;\n  };\n  /**\n  * Stops updating the task.\n  *\n  * @returns {ScheduledTask} instance of this task.\n  */\n\n\n  this.stop = () => {\n    this.status = 'stoped';\n\n    if (this.tick) {\n      clearTimeout(this.tick);\n      this.tick = null;\n    }\n\n    return this;\n  };\n  /**\n  * Returns the current task status.\n  *\n  * @returns {string} current task status.\n  * The return may be:\n  * - scheduled: when a task is scheduled and waiting to be executed.\n  * - running: the task status while the task is executing. \n  * - stoped: when the task is stoped.\n  * - destroyed: whe the task is destroyed, in that status the task cannot be re-started.\n  * - failed: a task is maker as failed when the previous execution fails.\n  */\n\n\n  this.getStatus = () => {\n    return this.status;\n  };\n  /**\n  * Destroys the scheduled task.\n  */\n\n\n  this.destroy = () => {\n    this.stop();\n    this.status = 'destroyed';\n    this.task = null;\n  };\n\n  task.on('started', () => {\n    this.status = 'running';\n  });\n  task.on('done', () => {\n    this.status = 'scheduled';\n  });\n  task.on('failed', () => {\n    this.status = 'failed';\n  });\n\n  this.task = () => {\n    var date = new Date();\n\n    if (timezone) {\n      date = tzOffset.timeAt(date, timezone);\n    }\n\n    this.tick = setTimeout(this.task, 1000 - date.getMilliseconds() + 1);\n    task.update(date);\n  };\n\n  this.tick = null;\n\n  if (options.scheduled !== false) {\n    this.start();\n  }\n}\n\nmodule.exports = ScheduledTask;","map":{"version":3,"sources":["/Users/montyj/Documents/projects/catchyobus/node_modules/node-cron/src/scheduled-task.js"],"names":["tzOffset","require","ScheduledTask","task","options","timezone","start","status","tick","setTimeout","Date","getMilliseconds","stop","clearTimeout","getStatus","destroy","on","date","timeAt","update","scheduled","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;AACpC,MAAIC,QAAQ,GAAGD,OAAO,CAACC,QAAvB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKC,KAAL,GAAa,MAAM;AACjB,SAAKC,MAAL,GAAc,WAAd;;AACA,QAAI,KAAKJ,IAAL,IAAa,CAAC,KAAKK,IAAvB,EAA6B;AAC3B,WAAKA,IAAL,GAAYC,UAAU,CAAC,KAAKN,IAAN,EAAY,OAAO,IAAIO,IAAJ,GAAWC,eAAX,EAAP,GAAsC,CAAlD,CAAtB;AACD;;AAED,WAAO,IAAP;AACD,GAPD;AASA;AACF;AACA;AACA;AACA;;;AACE,OAAKC,IAAL,GAAY,MAAM;AAChB,SAAKL,MAAL,GAAc,QAAd;;AACA,QAAI,KAAKC,IAAT,EAAe;AACbK,MAAAA,YAAY,CAAC,KAAKL,IAAN,CAAZ;AACA,WAAKA,IAAL,GAAY,IAAZ;AACD;;AAED,WAAO,IAAP;AACD,GARD;AAUA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,OAAKM,SAAL,GAAiB,MAAM;AACrB,WAAO,KAAKP,MAAZ;AACD,GAFD;AAIA;AACF;AACA;;;AACE,OAAKQ,OAAL,GAAe,MAAM;AACnB,SAAKH,IAAL;AACA,SAAKL,MAAL,GAAc,WAAd;AAEA,SAAKJ,IAAL,GAAY,IAAZ;AACD,GALD;;AAOAA,EAAAA,IAAI,CAACa,EAAL,CAAQ,SAAR,EAAmB,MAAM;AACvB,SAAKT,MAAL,GAAc,SAAd;AACD,GAFD;AAIAJ,EAAAA,IAAI,CAACa,EAAL,CAAQ,MAAR,EAAgB,MAAM;AACpB,SAAKT,MAAL,GAAc,WAAd;AACD,GAFD;AAIAJ,EAAAA,IAAI,CAACa,EAAL,CAAQ,QAAR,EAAkB,MAAM;AACtB,SAAKT,MAAL,GAAc,QAAd;AACD,GAFD;;AAIA,OAAKJ,IAAL,GAAY,MAAM;AAChB,QAAIc,IAAI,GAAG,IAAIP,IAAJ,EAAX;;AACA,QAAGL,QAAH,EAAY;AACVY,MAAAA,IAAI,GAAGjB,QAAQ,CAACkB,MAAT,CAAgBD,IAAhB,EAAsBZ,QAAtB,CAAP;AACD;;AACD,SAAKG,IAAL,GAAYC,UAAU,CAAC,KAAKN,IAAN,EAAY,OAAOc,IAAI,CAACN,eAAL,EAAP,GAAgC,CAA5C,CAAtB;AACAR,IAAAA,IAAI,CAACgB,MAAL,CAAYF,IAAZ;AACD,GAPD;;AASA,OAAKT,IAAL,GAAY,IAAZ;;AAEA,MAAIJ,OAAO,CAACgB,SAAR,KAAsB,KAA1B,EAAiC;AAC/B,SAAKd,KAAL;AACD;AACF;;AAEDe,MAAM,CAACC,OAAP,GAAiBpB,aAAjB","sourcesContent":["'use strict';\n\nvar tzOffset = require('tz-offset');\n\n/**\n* Creates a new scheduled task.\n*\n* @param {Task} task - task to schedule.\n* @param {*} options - task options.\n*/\nfunction ScheduledTask(task, options) {\n  var timezone = options.timezone;\n  \n  /**\n  * Starts updating the task.\n  *\n  * @returns {ScheduledTask} instance of this task.\n  */\n  this.start = () => {\n    this.status = 'scheduled';\n    if (this.task && !this.tick) {\n      this.tick = setTimeout(this.task, 1000 - new Date().getMilliseconds() + 1);\n    }\n    \n    return this;\n  };\n  \n  /**\n  * Stops updating the task.\n  *\n  * @returns {ScheduledTask} instance of this task.\n  */\n  this.stop = () => {\n    this.status = 'stoped';\n    if (this.tick) {\n      clearTimeout(this.tick);\n      this.tick = null;\n    }\n    \n    return this;\n  };\n  \n  /**\n  * Returns the current task status.\n  *\n  * @returns {string} current task status.\n  * The return may be:\n  * - scheduled: when a task is scheduled and waiting to be executed.\n  * - running: the task status while the task is executing. \n  * - stoped: when the task is stoped.\n  * - destroyed: whe the task is destroyed, in that status the task cannot be re-started.\n  * - failed: a task is maker as failed when the previous execution fails.\n  */\n  this.getStatus = () => {\n    return this.status;\n  };\n  \n  /**\n  * Destroys the scheduled task.\n  */\n  this.destroy = () => {\n    this.stop();\n    this.status = 'destroyed';\n    \n    this.task = null;\n  };\n  \n  task.on('started', () => {\n    this.status = 'running';\n  });\n  \n  task.on('done', () => {\n    this.status = 'scheduled';\n  });\n  \n  task.on('failed', () => {\n    this.status = 'failed';\n  });\n  \n  this.task = () => {\n    var date = new Date();\n    if(timezone){\n      date = tzOffset.timeAt(date, timezone);\n    }\n    this.tick = setTimeout(this.task, 1000 - date.getMilliseconds() + 1);\n    task.update(date);\n  };\n  \n  this.tick = null;\n  \n  if (options.scheduled !== false) {\n    this.start();\n  }\n}\n\nmodule.exports = ScheduledTask;\n"]},"metadata":{},"sourceType":"script"}