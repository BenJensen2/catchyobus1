{"ast":null,"code":"'use strict';\n\nvar monthNamesConversion = require('./month-names-conversion');\n\nvar weekDayNamesConversion = require('./week-day-names-conversion');\n\nvar convertAsterisksToRanges = require('./asterisk-to-range-conversion');\n\nvar convertRanges = require('./range-conversion');\n\nvar convertSteps = require('./step-values-conversion');\n\nmodule.exports = function () {\n  function appendSeccondExpression(expressions) {\n    if (expressions.length === 5) {\n      return ['0'].concat(expressions);\n    }\n\n    return expressions;\n  }\n\n  function removeSpaces(str) {\n    return str.replace(/\\s{2,}/g, ' ').trim();\n  } // Function that takes care of normalization.\n\n\n  function normalizeIntegers(expressions) {\n    for (var i = 0; i < expressions.length; i++) {\n      var numbers = expressions[i].split(',');\n\n      for (var j = 0; j < numbers.length; j++) {\n        numbers[j] = parseInt(numbers[j]);\n      }\n\n      expressions[i] = numbers;\n    }\n\n    return expressions;\n  }\n  /*\n   * The node-cron core allows only numbers (including multiple numbers e.g 1,2).\n   * This module is going to translate the month names, week day names and ranges\n   * to integers relatives.\n   *\n   * Month names example:\n   *  - expression 0 1 1 January,Sep *\n   *  - Will be translated to 0 1 1 1,9 *\n   *\n   * Week day names example:\n   *  - expression 0 1 1 2 Monday,Sat\n   *  - Will be translated to 0 1 1 1,5 *\n   *\n   * Ranges example:\n   *  - expression 1-5 * * * *\n   *  - Will be translated to 1,2,3,4,5 * * * *\n   */\n\n\n  function interprete(expression) {\n    var expressions = removeSpaces(expression).split(' ');\n    expressions = appendSeccondExpression(expressions);\n    expressions[4] = monthNamesConversion(expressions[4]);\n    expressions[5] = weekDayNamesConversion(expressions[5]);\n    expressions = convertAsterisksToRanges(expressions);\n    expressions = convertRanges(expressions);\n    expressions = convertSteps(expressions);\n    expressions = normalizeIntegers(expressions);\n    return expressions.join(' ');\n  }\n\n  return interprete;\n}();","map":{"version":3,"sources":["/Users/montyj/Documents/projects/catchyobus/node_modules/node-cron/src/convert-expression/index.js"],"names":["monthNamesConversion","require","weekDayNamesConversion","convertAsterisksToRanges","convertRanges","convertSteps","module","exports","appendSeccondExpression","expressions","length","concat","removeSpaces","str","replace","trim","normalizeIntegers","i","numbers","split","j","parseInt","interprete","expression","join"],"mappings":"AAAA;;AAEA,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,0BAAD,CAAlC;;AACA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,6BAAD,CAApC;;AACA,IAAIE,wBAAwB,GAAGF,OAAO,CAAC,gCAAD,CAAtC;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,oBAAD,CAA3B;;AACA,IAAII,YAAY,GAAGJ,OAAO,CAAC,0BAAD,CAA1B;;AAEAK,MAAM,CAACC,OAAP,GAAkB,YAAM;AAEtB,WAASC,uBAAT,CAAiCC,WAAjC,EAA6C;AAC3C,QAAGA,WAAW,CAACC,MAAZ,KAAuB,CAA1B,EAA4B;AAC1B,aAAO,CAAC,GAAD,EAAMC,MAAN,CAAaF,WAAb,CAAP;AACD;;AACD,WAAOA,WAAP;AACD;;AAED,WAASG,YAAT,CAAsBC,GAAtB,EAA2B;AACzB,WAAOA,GAAG,CAACC,OAAJ,CAAY,SAAZ,EAAuB,GAAvB,EAA4BC,IAA5B,EAAP;AACD,GAXqB,CAatB;;;AACA,WAASC,iBAAT,CAA2BP,WAA3B,EAAwC;AACtC,SAAK,IAAIQ,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGR,WAAW,CAACC,MAA9B,EAAsCO,CAAC,EAAvC,EAA0C;AACxC,UAAIC,OAAO,GAAGT,WAAW,CAACQ,CAAD,CAAX,CAAeE,KAAf,CAAqB,GAArB,CAAd;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACF,OAAO,CAACR,MAAxB,EAAgCU,CAAC,EAAjC,EAAoC;AAClCF,QAAAA,OAAO,CAACE,CAAD,CAAP,GAAaC,QAAQ,CAACH,OAAO,CAACE,CAAD,CAAR,CAArB;AACD;;AACDX,MAAAA,WAAW,CAACQ,CAAD,CAAX,GAAiBC,OAAjB;AACD;;AACD,WAAOT,WAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASa,UAAT,CAAoBC,UAApB,EAA+B;AAC7B,QAAId,WAAW,GAAGG,YAAY,CAACW,UAAD,CAAZ,CAAyBJ,KAAzB,CAA+B,GAA/B,CAAlB;AACAV,IAAAA,WAAW,GAAGD,uBAAuB,CAACC,WAAD,CAArC;AACAA,IAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBT,oBAAoB,CAACS,WAAW,CAAC,CAAD,CAAZ,CAArC;AACAA,IAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBP,sBAAsB,CAACO,WAAW,CAAC,CAAD,CAAZ,CAAvC;AACAA,IAAAA,WAAW,GAAGN,wBAAwB,CAACM,WAAD,CAAtC;AACAA,IAAAA,WAAW,GAAGL,aAAa,CAACK,WAAD,CAA3B;AACAA,IAAAA,WAAW,GAAGJ,YAAY,CAACI,WAAD,CAA1B;AAEAA,IAAAA,WAAW,GAAGO,iBAAiB,CAACP,WAAD,CAA/B;AAEA,WAAOA,WAAW,CAACe,IAAZ,CAAiB,GAAjB,CAAP;AACD;;AAED,SAAOF,UAAP;AACD,CAzDgB,EAAjB","sourcesContent":["'use strict';\n\nvar monthNamesConversion = require('./month-names-conversion');\nvar weekDayNamesConversion = require('./week-day-names-conversion');\nvar convertAsterisksToRanges = require('./asterisk-to-range-conversion');\nvar convertRanges = require('./range-conversion');\nvar convertSteps = require('./step-values-conversion');\n\nmodule.exports = (() => {\n\n  function appendSeccondExpression(expressions){\n    if(expressions.length === 5){\n      return ['0'].concat(expressions);\n    }\n    return expressions;\n  }\n\n  function removeSpaces(str) {\n    return str.replace(/\\s{2,}/g, ' ').trim();\n  }\n\n  // Function that takes care of normalization.\n  function normalizeIntegers(expressions) {\n    for (var i=0; i < expressions.length; i++){\n      var numbers = expressions[i].split(',');\n      for (var j=0; j<numbers.length; j++){\n        numbers[j] = parseInt(numbers[j]);\n      }\n      expressions[i] = numbers;\n    }\n    return expressions;\n  }\n\n  /*\n   * The node-cron core allows only numbers (including multiple numbers e.g 1,2).\n   * This module is going to translate the month names, week day names and ranges\n   * to integers relatives.\n   *\n   * Month names example:\n   *  - expression 0 1 1 January,Sep *\n   *  - Will be translated to 0 1 1 1,9 *\n   *\n   * Week day names example:\n   *  - expression 0 1 1 2 Monday,Sat\n   *  - Will be translated to 0 1 1 1,5 *\n   *\n   * Ranges example:\n   *  - expression 1-5 * * * *\n   *  - Will be translated to 1,2,3,4,5 * * * *\n   */\n  function interprete(expression){\n    var expressions = removeSpaces(expression).split(' ');\n    expressions = appendSeccondExpression(expressions);\n    expressions[4] = monthNamesConversion(expressions[4]);\n    expressions[5] = weekDayNamesConversion(expressions[5]);\n    expressions = convertAsterisksToRanges(expressions);\n    expressions = convertRanges(expressions);\n    expressions = convertSteps(expressions);\n\n    expressions = normalizeIntegers(expressions);\n\n    return expressions.join(' ');\n  }\n\n  return interprete;\n})();\n"]},"metadata":{},"sourceType":"script"}