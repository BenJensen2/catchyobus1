{"ast":null,"code":"'use strict';\n\nvar Task = require('./task'),\n    ScheduledTask = require('./scheduled-task'),\n    validation = require('./pattern-validation');\n\nmodule.exports = (() => {\n  /**\n   * Creates a new task to execute given function when the cron\n   *  expression ticks.\n   *\n   * @param {string} expression - cron expression.\n   * @param {Function} func - task to be executed.\n   * @param {Object} options - a set of options for the scheduled task:\n   *    - scheduled <boolean>: if a schaduled task is ready and running to be \n   *      performed when the time mach with the cron excpression.\n   *    - timezone <string>: the tiemzone to execute the tasks.\n   * \n   *    Example: \n   *    {\n   *      \"scheduled\": true,\n   *      \"timezone\": \"America/Sao_Paulo\"\n   *    } \n   * \n   * @returns {ScheduledTask} update function.\n   */\n  function createTask(expression, func, options) {\n    // Added for immediateStart depreciation\n    if (typeof options === 'boolean') {\n      console.warn('DEPRECIATION: imediateStart is deprecated and will be removed soon in favor of the options param.');\n      options = {\n        scheduled: options\n      };\n    }\n\n    if (!options) {\n      options = {\n        scheduled: true\n      };\n    }\n\n    var task = new Task(expression, func);\n    return new ScheduledTask(task, options);\n  }\n\n  function validate(expression) {\n    try {\n      validation(expression);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return {\n    schedule: createTask,\n    validate: validate\n  };\n})();","map":{"version":3,"sources":["/Users/montyj/Documents/projects/catchyobus/node_modules/node-cron/src/node-cron.js"],"names":["Task","require","ScheduledTask","validation","module","exports","createTask","expression","func","options","console","warn","scheduled","task","validate","e","schedule"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;AAAA,IACEC,aAAa,GAAGD,OAAO,CAAC,kBAAD,CADzB;AAAA,IAEEE,UAAU,GAAGF,OAAO,CAAC,sBAAD,CAFtB;;AAIAG,MAAM,CAACC,OAAP,GAAiB,CAAC,MAAM;AAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,WAASC,UAAT,CAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,OAAtC,EAA+C;AAC7C;AACA,QAAG,OAAOA,OAAP,KAAmB,SAAtB,EAAgC;AAC9BC,MAAAA,OAAO,CAACC,IAAR,CAAa,mGAAb;AACAF,MAAAA,OAAO,GAAG;AACRG,QAAAA,SAAS,EAAEH;AADH,OAAV;AAGD;;AAED,QAAG,CAACA,OAAJ,EAAY;AACVA,MAAAA,OAAO,GAAG;AACRG,QAAAA,SAAS,EAAE;AADH,OAAV;AAGD;;AAED,QAAIC,IAAI,GAAG,IAAIb,IAAJ,CAASO,UAAT,EAAqBC,IAArB,CAAX;AACA,WAAO,IAAIN,aAAJ,CAAkBW,IAAlB,EAAwBJ,OAAxB,CAAP;AACD;;AAED,WAASK,QAAT,CAAkBP,UAAlB,EAA8B;AAC5B,QAAI;AACFJ,MAAAA,UAAU,CAACI,UAAD,CAAV;AACD,KAFD,CAEE,OAAMQ,CAAN,EAAS;AACT,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAED,SAAO;AACLC,IAAAA,QAAQ,EAAEV,UADL;AAELQ,IAAAA,QAAQ,EAAEA;AAFL,GAAP;AAID,CAtDgB,GAAjB","sourcesContent":["'use strict';\n\nvar Task = require('./task'),\n  ScheduledTask = require('./scheduled-task'),\n  validation = require('./pattern-validation');\n\nmodule.exports = (() => {\n\n  /**\n   * Creates a new task to execute given function when the cron\n   *  expression ticks.\n   *\n   * @param {string} expression - cron expression.\n   * @param {Function} func - task to be executed.\n   * @param {Object} options - a set of options for the scheduled task:\n   *    - scheduled <boolean>: if a schaduled task is ready and running to be \n   *      performed when the time mach with the cron excpression.\n   *    - timezone <string>: the tiemzone to execute the tasks.\n   * \n   *    Example: \n   *    {\n   *      \"scheduled\": true,\n   *      \"timezone\": \"America/Sao_Paulo\"\n   *    } \n   * \n   * @returns {ScheduledTask} update function.\n   */\n  function createTask(expression, func, options) {\n    // Added for immediateStart depreciation\n    if(typeof options === 'boolean'){\n      console.warn('DEPRECIATION: imediateStart is deprecated and will be removed soon in favor of the options param.');\n      options = {\n        scheduled: options\n      };\n    }\n    \n    if(!options){\n      options = {\n        scheduled: true\n      };\n    }\n\n    var task = new Task(expression, func);\n    return new ScheduledTask(task, options);\n  }\n\n  function validate(expression) {\n    try {\n      validation(expression);\n    } catch(e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return {\n    schedule: createTask,\n    validate: validate\n  };\n})();\n"]},"metadata":{},"sourceType":"script"}